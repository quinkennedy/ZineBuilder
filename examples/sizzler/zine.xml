<?xml version="1.0"?>
<zine>
<cover id="1">
	<page id="2">
		<heading>Bye.</heading>
	</page>
	<page id="1">
		<image src="images/jq_squares.png"></image>
		<heading>Generative Zine Workshop 001</heading>
		<subheading>Let's make a generative zine together using this crazy programmatic layout engine</subheading>
		<footer>#<var key="num" /> of <var key="total" /> generated on <var key="date"/></footer>
	</page>
</cover>
<cover id="2">
	<page id="3">
		<heading>Welcome to our zine shindig!

We will just jam together to create a group zine. You can participate by creating "WorkshopBox" and "WorkshopText" elements. This zine illustrates a few examples of how to make and use these elements.

A "WorkshopBox" allows you to render graphics into a section.

A "WorkshopText" allows you to generate text which will be rendered by the build-in text rendering engine. Your text can also be consumed by other text generators. Stand on the shoulder of giants!</heading>
	   <image src="images/U_2_694819491672_archigram.jpg"></image>
	</page>
		<page id="4">
	   <heading>Thank you for taking the time to read this zine. Our goals were to discuss:

* Why should we invent computing to extend and augment humans? How will it teach us more deeply about ourselves?

* How can we extend our technologies to the objects and environments which help define who we are and how we live? What new sensing will need to be created?

* What if we understood an acre of land? What if the biomass of the earth were networked?

We would like to thank the Processing community for making this possible, in particular contributors to Processing Core, CAN_GenerativeTypography, StippleGen2, and iText.

Thanks for reading. Reach us at @sensorycc #sensoryaesthetics</heading>
	   <subheading></subheading>
	</page>
</cover>
<spread id="1">
	<!-- the first page in the first spread is actually the back cover -->
	<page id="16" type="quote">
		<subheading>02015</subheading>
		<quote author="">Today's noise is tomorrow's information.

-Quin Kennedy</quote>
		<footer>Sensory Aesthetics</footer>
	</page>
	<page id="1" type="toc">
		<heading>Table of Contents</heading>
		<footer>Every year children are taught how to interpet a table of contents, an information structure which dates back at least 2000 years. Do you remember learning how to use a table of contents?

__ yes  __no __not sure</footer>
	</page>
</spread>
<spread id="2">
	<page id="2">
	   <JoshuaExampleFullBleed></JoshuaExampleFullBleed>
	</page>
	<page id="3">
		<heading>Full Bleed</heading>
		<body>On the opposite page, we see an example of a generative block which renders full bleed.

On the following spread there is an example of a generative block which renders over the entire spread.</body>
	</page>
</spread>
<spread id="3">
	<page id="4">
	 <JoshuaExampleFullSpread></JoshuaExampleFullSpread>
	</page>
</spread>
<spread id="4">
	<page id="6">
		<heading>Generative Block</heading>
		<subheading>This page shows a generative block laid out with a heading and subheading</subheading>
		<JoshuaExample></JoshuaExample>
	</page>
	<page id="7">
	  <JoshuaExample></JoshuaExample>
	  <footer>This page uses the same generative block, but does not have a heading.</footer>
	</page>
</spread>
<spread id="5">
	<page id="8">
		<heading>Pre-rendered</heading>
		<subheading>Here we see a pre-renderer sequence of images inserted into the document</subheading>
		<image src="../ProcessingFrameCreator/screen-%04d.tif" />
		<randomImage />
	</page>
	<page id="9">
		<body>You can also scale up the image</body>
		<image src="../ProcessingFrameCreator/screen-%04d.tif" fit="contain" />
	</page>
</spread>
<spread id="6">
	<page id="10">
		<heading>Generative Text</heading>
		<subheading>A <var key="noun" /> tried to <var key="verb" /></subheading>
		<body>The subheading on this page uses generative text to create a different sentence for each copy. The <italic>var</italic> tag is used to expose these text generators.

Example:
&lt;var key="noun" />

The following page uses a number of text generators to show a random word and associated content.
</body>
	</page>
	<page id="11">
		<heading><var key="keyword" keywordIndex="0" /></heading>
		<subheading><var key="definition" useKeyword="useKeyword" keywordIndex="0" /></subheading>
	</page>
</spread>
<spread id="7">
	<page id="12" type="toplist">
		<heading>10 Random Keywords</heading>
		<body><bold>1. <var key="keyword" keywordIndex="1" />
2. <var key="keyword" keywordIndex="2" />
3. <var key="keyword" keywordIndex="3" />
4. <var key="keyword" keywordIndex="4" />
5. <var key="keyword" keywordIndex="5" />
6. <var key="keyword" keywordIndex="6" />
7. <var key="keyword" keywordIndex="7" />
8. <var key="keyword" keywordIndex="8" />
9. <var key="keyword" keywordIndex="9" />
10. <var key="keyword" keywordIndex="10" /></bold></body>
<footer>*Did you really miss that call?</footer>
	</page>
	<page id="13" type="photo">
		<image src="images/drawing4b.jpg"></image>
	</page>
</spread>
<spread id="8" renderer="P3D">
	<page id="14">
 	<heading>3D Rendering</heading>
	   <subheading>You can use a specific renderer (P3D, P2D, OPENGL) for any particular spread.</subheading>
	   <body>By specifying the <bold>renderer</bold> attribute in the spread tag, you can control which renderer is used for that spread.

Valid values are:
* P3D
* P2D
* OPENGL

Example:
&lt;spread renderer="P3D">
	&lt;!-- pages and content go here -->
&lt;/spread>

<italic>This</italic> spread is using the P3D renderer. You can see 3D content on the opposite page.
</body>
	</page>
	<page id="15">
		<threedee />
	</page>
</spread>
</zine>
